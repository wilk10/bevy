initSidebarItems({"fn":[["logical_core_count","Returns the number of available CPUs of the current system."],["physical_core_count","Returns the number of physical cores of the current system."]],"mod":[["prelude",""]],"struct":[["AsyncComputeTaskPool","A newtype for a task pool for CPU-intensive work that may span across multiple frames"],["ComputeTaskPool","A newtype for a task pool for CPU-intensive work that must be completed to deliver the next frame"],["CountdownEvent","A counter that starts with an initial count `n`. Once it is decremented `n` times, it will be “ready”. Call `listen` to get a future that can be awaited."],["IoTaskPool","A newtype for a task pool for IO-intensive work (i.e. tasks that spend very little time in a “woken” state)"],["Scope","A `TaskPool` scope for running one or more non-`'static` futures."],["Task","Wraps `async_executor::Task`, a spawned future."],["TaskPool","A thread pool for executing tasks. Tasks are futures that are being automatically driven by the pool on threads owned by the pool."],["TaskPoolBuilder","Used to create a [`TaskPool`]"]],"trait":[["ParallelIterator","[`ParallelIterator`] closely emulates the `std::iter::Iterator` interface. However, it uses `bevy_task` to compute batches in parallel."],["ParallelSlice","Provides functions for mapping read-only slices across a provided [`TaskPool`]."],["ParallelSliceMut","Provides functions for mapping mutable slices across a provided [`TaskPool`]."]]});