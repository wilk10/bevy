initSidebarItems({"constant":[["COLOR_MATERIAL_SHADER_HANDLE",""],["MESH2D_SHADER_HANDLE",""],["MESH2D_STRUCT_HANDLE",""],["MESH2D_VIEW_BIND_GROUP_HANDLE",""],["SPRITE_SHADER_HANDLE",""]],"enum":[["Anchor","How a sprite is positioned relative to its `Transform`. It defaults to `Anchor::Center`."],["SpriteSystem",""],["TextureAtlasBuilderError",""]],"fn":[["extract_mesh2d",""],["extract_sprite_events",""],["extract_sprites",""],["queue_material2d_meshes",""],["queue_mesh2d_bind_group",""],["queue_mesh2d_view_bind_groups",""],["queue_sprites",""]],"mod":[["collide_aabb","Utilities for detecting if and on which side two axis-aligned bounding boxes (AABB) collide."],["prelude",""]],"struct":[["ColorMaterial","A 2d material that renders 2d meshes with a texture tinted by a uniform color"],["ColorMaterialFlags",""],["ColorMaterialPlugin",""],["ColorMaterialUniformData","The GPU representation of the uniform data of a [`ColorMaterial`]."],["DrawMesh2d",""],["DrawSpriteBatch",""],["DynamicTextureAtlasBuilder",""],["ExtractedSprite",""],["ExtractedSprites",""],["GpuColorMaterial","The GPU representation of a [`ColorMaterial`]."],["ImageBindGroups",""],["Material2dKey",""],["Material2dPipeline",""],["Material2dPlugin","Adds the necessary ECS resources and render logic to enable rendering entities using the given [`SpecializedMaterial2d`] asset type (which includes [`Material2d`] types)."],["MaterialMesh2dBundle","A component bundle for entities with a [`Mesh2dHandle`] and a [`SpecializedMaterial2d`]."],["Mesh2dBindGroup",""],["Mesh2dHandle","Component for rendering with meshes in the 2d pipeline, usually with a 2d material such as `ColorMaterial`."],["Mesh2dPipeline",""],["Mesh2dPipelineKey",""],["Mesh2dRenderPlugin",""],["Mesh2dUniform",""],["Mesh2dViewBindGroup",""],["Rect","A rectangle defined by two points. There is no defined origin, so 0,0 could be anywhere (top-left, bottom-left, etc)"],["SetMaterial2dBindGroup",""],["SetMesh2dBindGroup",""],["SetMesh2dViewBindGroup",""],["SetSpriteTextureBindGroup",""],["SetSpriteViewBindGroup",""],["Sprite",""],["SpriteAssetEvents",""],["SpriteBatch",""],["SpriteBundle",""],["SpriteMeta",""],["SpritePipeline",""],["SpritePipelineKey",""],["SpritePlugin",""],["SpriteSheetBundle","A Bundle of components for drawing a single sprite from a sprite sheet (also referred to as a `TextureAtlas`)"],["Std140ColorMaterialUniformData",""],["Std140Mesh2dUniform",""],["TextureAtlas","An atlas containing multiple textures (like a spritesheet or a tilemap). Example usage animating sprite. Example usage loading sprite sheet."],["TextureAtlasBuilder","A builder which is used to create a texture atlas from many individual sprites."],["TextureAtlasSprite",""]],"trait":[["Material2d","Materials are used alongside [`Material2dPlugin`] and [`MaterialMesh2dBundle`] to spawn entities that are rendered with a specific [`Material2d`] type. They serve as an easy to use high level way to render [`Mesh2dHandle`] entities with custom shader logic. For materials that can specialize their [`RenderPipelineDescriptor`] based on specific material values, see [`SpecializedMaterial2d`]. [`Material2d`] automatically implements [`SpecializedMaterial2d`] and can be used anywhere that type is used (such as [`Material2dPlugin`])."],["SpecializedMaterial2d","Materials are used alongside [`Material2dPlugin`] and `MaterialMesh2dBundle` to spawn entities that are rendered with a specific [`SpecializedMaterial2d`] type. They serve as an easy to use high level way to render [`Mesh2dHandle`] entities with custom shader logic. `SpecializedMaterial2d`s use their [`SpecializedMaterial2d::Key`] to customize their [`RenderPipelineDescriptor`] based on specific material values. The slightly simpler [`Material2d`] trait should be used for materials that do not need specialization. [`Material2d`] types automatically implement [`SpecializedMaterial2d`]."]],"type":[["ColorMesh2dBundle","A component bundle for entities with a `Mesh2dHandle` and a [`ColorMaterial`]."],["DrawSprite",""],["TextureAtlasBuilderResult",""]]});