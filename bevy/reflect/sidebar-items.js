initSidebarItems({"attr":[["reflect_trait",""]],"derive":[["FromReflect",""],["Reflect",""],["TypeUuid",""]],"enum":[["ReflectMut","A mutable enumeration of “kinds” of reflected type."],["ReflectPathError","An error returned from a failed path string query."],["ReflectRef","An immutable enumeration of “kinds” of reflected type."]],"fn":[["list_apply","Applies the elements of `b` to the corresponding elements of `a`."],["list_partial_eq","Compares a [`List`] with a [`Reflect`] value."],["map_partial_eq","Compares a [`Map`] with a [`Reflect`] value."],["struct_partial_eq","Compares a [`Struct`] with a [`Reflect`] value."],["tuple_apply","Applies the elements of `b` to the corresponding elements of `a`."],["tuple_partial_eq","Compares a [`Tuple`] with a [`Reflect`] value."],["tuple_struct_partial_eq","Compares a [`TupleStruct`] with a [`Reflect`] value."]],"macro":[["impl_from_reflect_value",""],["impl_reflect_value",""]],"mod":[["erased_serde","github crates-io docs-rs"],["prelude",""],["serde",""]],"struct":[["DynamicList","A list of reflected values."],["DynamicMap","An ordered mapping between reflected values."],["DynamicStruct","A struct type which allows fields to be added at runtime."],["DynamicTuple","A tuple which allows fields to be added at runtime."],["DynamicTupleStruct","A tuple struct which allows fields to be added at runtime."],["FieldIter","An iterator over the field values of a struct."],["ListIter","An iterator over the elements of a [`List`]."],["MapIter","An iterator over the key-value pairs of a [`Map`]."],["ReflectDeserialize","A struct used to deserialize reflected instances of a type."],["ReflectHasher","A `Hasher` for hashing an arbitrary stream of bytes."],["TupleFieldIter","An iterator over the field values of a tuple."],["TupleStructFieldIter","An iterator over the field values of a tuple struct."],["TypeRegistration","A record of data about a type."],["TypeRegistry","A synchronized wrapper around a [`TypeRegistry`]."],["TypeRegistryArc","A synchronized wrapper around a [`TypeRegistry`]."],["TypeRegistryInternal","A registry of reflected types."],["Uuid","A Universally Unique Identifier (UUID)."]],"trait":[["FromReflect","A trait for types which can be constructed from a reflected type."],["FromType","Trait used to generate [`TypeData`] for trait reflection."],["GetField","A convenience trait which combines fetching and downcasting of struct fields."],["GetPath","A trait which allows nested values to be retrieved with path strings."],["GetTupleField","A convenience trait which combines fetching and downcasting of tuple fields."],["GetTupleStructField","A convenience trait which combines fetching and downcasting of tuple struct fields."],["GetTypeRegistration","A trait which allows a type to generate its [`TypeRegistration`]."],["List","An ordered, mutable list of [Reflect] items. This corresponds to types like [`std::vec::Vec`]."],["Map","An ordered mapping between [`Reflect`] values."],["Reflect","A reflected Rust type."],["Struct","A reflected Rust regular struct type."],["Tuple","A reflected Rust tuple."],["TupleStruct","A reflected Rust tuple struct."],["TypeData","A trait for types generated by the `#[reflect_trait]` attribute macro."],["TypeUuid","A trait for types with a statically associated UUID."],["TypeUuidDynamic","A trait for types with an associated UUID."]]});